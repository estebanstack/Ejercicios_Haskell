-- Convierte un entero en una lista de dígitos
toDigits :: Integer -> [Integer]
toDigits n
    | n <= 0    = []
    | otherwise = map (read . (:[])) (show n)

-- Convierte un entero en una lista de dígitos en orden inverso
toDigitsRev :: Integer -> [Integer]
toDigitsRev n = reverse (toDigits n)

-- Duplica cada otro número comenzando desde la derecha
doubleEveryOther :: [Integer] -> [Integer]
doubleEveryOther = reverse . zipWith ($) (cycle [id, (*2)]) . reverse

-- Suma los dígitos de una lista de números
sumDigits :: [Integer] -> Integer
sumDigits = sum . concatMap toDigits

-- Valida un número de tarjeta de crédito
validate :: Integer -> Bool
validate n = (sumDigits (doubleEveryOther (toDigits n)) `mod` 10) == 0

main::IO()
main=do
    putStrLn "Ingresa un número para validar:"
    input <- getLine
    let number = read input :: Integer
    putStrLn $ "¿Es un número de tarjeta de crédito válido? " ++ show (validate number)
